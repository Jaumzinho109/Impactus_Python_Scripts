import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as mtick
from fredapi import Fred
from streamlit_option_menu import option_menu
from matplotlib import rcParams
from streamlit_option_menu import option_menu
from variaveis_dashboard import *
from streamlit_option_menu import option_menu  

fred = Fred(api_key="672d5598c8a41df9397cc5eb92c02d5e")

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Central de Dados - EUA",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ---- SIDEBAR ----
with st.sidebar:
    st.markdown("## Central de Dados Econ√¥micos US")
    st.markdown("""
    Este site apresenta **dados econ√¥micos dos EUA** e an√°lises em rela√ß√£o a seus impactos macroecon√¥micos. """)
    
    st.markdown("### üîó Links √öteis")
    st.markdown("- [BEA - Site Oficial](https://www.bea.gov/)")
    st.markdown("- [Federal Reserve of St. Louis](https://www.federalreserve.gov/)")
    st.markdown("- [GitHub do Projeto](https://github.com/Jaumzinho109/Impactus_Python_Scripts/blob/main/PCE_data/PCE_Headline.py)")

# ---- CABE√áALHO ----
st.title("US Data Base")

# ---- MENU PRINCIPAL ----
st.session_state["Core CPI NSA"] = core_cpi_nsa

menu = option_menu(
    menu_title=None,  
    options=[
        "Mercado de Trabalho",
        "Infla√ß√£o",
        "Atividade Econ√¥mica",
        "Pol√≠tica Monet√°ria"  
    ],
    icons=[
        "briefcase",       
        "graph-up",        
        "bar-chart",    
        "bank"             
    ],
    menu_icon="cast",       
    default_index=0,        
    orientation="horizontal",
    styles={
        "container": {"padding": "0!important", "background-color": "#0e0f12"},
        "icon": {"color": "white", "font-size": "18px"},
        "nav-link": {
            "font-size": "18px",
            "text-align": "left",
            "margin": "0px",
            "--hover-color": "#2c2f36",
            "color": "white",
        },
        "nav-link-selected": {
            "background-color": "#0e0f12",
            "color": "#d02c2c",
            "border-bottom": "3px solid #d02c2c"
        },
    }
)
if menu == "Infla√ß√£o":
    st.header("Infla√ß√£o")

    subtema = st.selectbox(
        "Selecione o Subtema (Infla√ß√£o)",
        ["PCE", "CPI", "PPI", "Inflation Breakeven"]
    )

    if subtema == "PCE":
        st.write(
        "O dado cheio do PCE avan√ßou 0,33% m/m em janeiro, enquanto o n√∫cleo subiu 0,25% m/m, ambas em linha com as proje√ß√µes de mercado. Isso provocou a desacelera√ß√£o do dado anual para 2,5%, contudo o momentum de 3 meses ainda apresenta tend√™ncia de alta, o que mant√©m acesa a nossa preocupa√ß√£o em rela√ß√£o √† infla√ß√£o.<br><br>"
        " O setor de servi√ßos avan√ßou 0,25% m/m, um n√∫mero menor em rela√ß√£o √† m√©dia das leituras de 2024. Esse √© um bom sinal, considerando que no √∫ltimo ano, o setor foi a maior complica√ß√£o para o avan√ßo da infla√ß√£o √† meta do FED. J√° a parte de bens avan√ßou 0,6% m/m, um dado muito forte, mas que n√£o apresenta grandes amea√ßas pela sua tend√™ncia historicamente mais baixa.<br><br>"
        "Por fim, os n√∫meros s√£o mistos, pois ainda que a leitura tenha sido em linha com as expectativas, uma varia√ß√£o mensal de 0,33% √© muito acima da meta do FED. Al√©m disso, o consumo pessoal apresentou retra√ß√£o de 0,2%, o que alimenta a narrativa de estagfla√ß√£o.",
        unsafe_allow_html=True
    )

        opcao_grafico = st.selectbox(
        "Selecione a Visualiza√ß√£o",
        ["PCE Contributions", "Headline PCE", "Core PCE", "PCE - Goods", "PCE - Services", "PCE - Food", "PCE - Energy", "PCE - Nondurable Goods", "PCE - Durable Goods"]  
    )
        if opcao_grafico == "PCE Contributions":
            st.pyplot(pce_decomposto)
        elif opcao_grafico == "Headline PCE":
            st.pyplot(pce_headline)
        elif opcao_grafico == "Core PCE":
            
            st.pyplot(pce_core_mom)
            st.pyplot(pce_core_ya)
        elif opcao_grafico == "PCE - Goods":
            st.pyplot(pce_goods_mom)
            st.pyplot(pce_goods_ya)
        elif opcao_grafico == "PCE - Nondurable Goods":
            st.pyplot(pce_ndur_mom)
            st.pyplot(pce_ndur_yoy)
        elif opcao_grafico == "PCE - Durable Goods":
            st.pyplot(pce_durable_mom)
            st.pyplot(pce_durable_yoy)
        elif opcao_grafico == "PCE - Services":
            st.pyplot(pce_serv_mom)
            st.pyplot(pce_serv_ya)
        elif opcao_grafico == "PCE - Food":
            st.pyplot(pce_food_mom)
            st.pyplot(pce_food_yoy)
        elif opcao_grafico == "PCE - Energy":
            st.pyplot(pce_en_mom)
            st.pyplot(pce_food_yoy)
    if subtema == "CPI":
        opcao_grafico = st.selectbox(
            "Selecione a Visualiza√ß√£o",
            ['Core_cpi_nsa']
        )
        if opcao_grafico == "Core_cpi_nsa":
            st.pyplot(st.session_state["Core CPI NSA"])
elif menu == "Mercado de Trabalho":
    st.write("A cria√ß√£o l√≠quida de empregos no Payroll foi de 151 mil no m√™s de fevereiro, abaixo das expectativas de mercado (160 mil). Seu componente c√≠clico apresentou desacelera√ß√£o em rela√ß√£o ao m√™s anterior. Acreditamos que isso foi resultado de maiores incertezas em rela√ß√£o ao futuro devido, especialmente, aos ru√≠dos de Trump em rela√ß√£o √†s tarifas e maior austeridade. Por um lado, nossas nossas preocupa√ß√µes em rela√ß√£o a uma nova acelera√ß√£o do setor que pressione os pre√ßos diminuem, mas por outro, esse fator aumenta a possibilidade de recess√£o. <br><br>"
             "o ganho m√©dio por hora trabalhada subiu 0,3% no √∫ltimo m√™s em linha com o esperado, a taxa de desemprego subiu para 4.1%, acima das expectativas (4,0%).<br><br>"
             "Por fim, os dados sugerem certo arrefecimento do setor, visto que o maior n√≠vel de desemprego junto √† tend√™ncia de menor demanda por trabalho tendem a pression√°-lo ao equil√≠brio.",
             unsafe_allow_html=True)
    subtema_trabalho = option_menu(
        menu_title=None,  
        options=["Payroll", "Emprego", "Sal√°rios"],
        default_index=0,
        orientation="horizontal"
    )
    if subtema_trabalho == "Emprego":
        unrate_graphs = st.selectbox(
            "",
            ["Unemployment Rate", "Beveridge Curve","Labor Force Participation Rate", "Employment Change", "Layoffs and Discharges", "Hires and Job Quits", "Initial Claims", "Continuing Claims"]
        )
        if unrate_graphs == "Unemployment Rate":
            st.pyplot(unrate)
        elif unrate_graphs == "Beveridge Curve":
            st.pyplot(beveridge_curve)
            st.pyplot(beveridge_ratio)
        elif unrate_graphs == "Labor Force Participation Rate":
            st.pyplot(participation_rate)
        elif unrate_graphs == "Employment Change":
            st.pyplot(employment_change)
        elif unrate_graphs == "Layoffs and Discharges":
            st.pyplot(layoffs_and_discharges)
        elif unrate_graphs == "Hires and Job Quits":
            st.pyplot(hires_and_jobquits)
        elif unrate_graphs == "Initial Claims":
            st.pyplot(initial_claims)
        elif unrate_graphs == "Continuing Claims":
            st.pyplot(continuing_claims)
    if subtema_trabalho == "Payroll":
        payroll_graphs = st.selectbox(
        "",
        ["Payroll: Cria√ß√£o L√≠quida de Postos","Payroll: Ordering", "Payroll: Cyclics x Acyclics", "Payroll: Private x Government","Private Payroll: Goods x Services",
            "Payroll: Total vs Breakdown", "Payroll: SAM Rule"])
        if payroll_graphs == "Payroll: Cria√ß√£o L√≠quida de Postos":
            st.pyplot(payroll)
        elif payroll_graphs == "Payroll: Private x Government":
            st.pyplot(private_vs_government)
        elif payroll_graphs == "Private Payroll: Goods x Services":
            st.pyplot(goods_vs_services_payroll)
        elif payroll_graphs == "Payroll: Cyclics x Acyclics":
            st.pyplot(cic_payroll)
        elif payroll_graphs == "Payroll: Total vs Breakdown":
            st.pyplot(breakdown_payroll)
        elif payroll_graphs == "Payroll: SAM Rule":
            st.pyplot(sahm_rule)
        elif payroll_graphs == "Payroll: Ordering":
            st.pyplot(ordering)